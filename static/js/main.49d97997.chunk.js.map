{"version":3,"sources":["App.jsx","index.js"],"names":["sdk","ThirdwebSDK","bundleDropModule","getBundleDropModule","tokenModule","getTokenModule","voteModule","getVoteModule","App","useWeb3","connectWallet","address","provider","error","console","log","useState","hasClaimedNFT","setHasClaimedNFT","isClaiming","setIsClaiming","memberTokenAmounts","setMemberTokenAmounts","memberAddresses","setMemberAddresses","proposals","setProposals","isVoting","setIsVoting","hasVoted","setHasVoted","signer","getSigner","undefined","useEffect","setProviderOrSigner","balanceOf","then","balance","gt","catch","getAllClaimerAddresses","addresess","err","getAllHolderBalances","amounts","getAll","length","proposalId","memberList","useMemo","map","tokenAmount","ethers","utils","formatUnits","className","style","href","onClick","member","str","substring","onSubmit","e","a","preventDefault","stopPropagation","votes","proposal","voteResult","vote","forEach","document","getElementById","type","checked","getDelegationOf","constants","AddressZero","delegateTo","Promise","all","get","state","execute","index","description","id","name","value","defaultChecked","htmlFor","label","disabled","claim","finally","ReactDOM","render","StrictMode","connectors","injected","supportedChainIds"],"mappings":"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","file":"static/js/main.49d97997.chunk.js","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\nimport { ThirdwebSDK } from \"@3rdweb/sdk\";\nimport { useWeb3 } from \"@3rdweb/hooks\";\nimport { ethers } from 'ethers';\n// We instatiate the sdk on Rinkeby.\nconst sdk = new ThirdwebSDK(\"rinkeby\");\n\n// We can grab a reference to our ERC-1155 contract.\nconst bundleDropModule = sdk.getBundleDropModule(\n  \"0xF5e792349b481E8D79F0a6f06aB4540c0ac4bD6F\",\n);\n\nconst tokenModule = sdk.getTokenModule(\n  \"0xc56693AC133d4f5890A90dB3Aa64EaD2C5296cDd\"\n);\n\nconst voteModule = sdk.getVoteModule(\n  \"0x031a8FCCFd0b18f00cc069146C43285F6527D64b\",\n);\n\n\nconst App = () => {\n\n  const { connectWallet, address, error, provider } = useWeb3();\n  console.log(\"ðŸ‘‹ Address:\", address)\n\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false);\n  const [isClaiming, setIsClaiming] = useState(false);\n  const [memberTokenAmounts, setMemberTokenAmounts] = useState({});\n  const [memberAddresses, setMemberAddresses] = useState([]);\n  const [proposals, setProposals] = useState([]);\n  const [isVoting, setIsVoting] = useState(false);\n  const [hasVoted, setHasVoted] = useState(false);\n\n  // A fancy function to shorten someones wallet address, no need to show the whole thing.\n  const shortenAddress = (str) => {\n    return str.substring(0, 6) + \"...\" + str.substring(str.length - 4);\n  };\n\n  // The signer is required to sign transactions on the blockchain.\n  const signer = provider ? provider.getSigner() : undefined;\n\n  useEffect(() => {\n    // We pass the signer to the sdk, which enables us to interact with\n    // our deployed contract!\n    sdk.setProviderOrSigner(signer);\n  }, [signer]);\n\n  useEffect(() => {\n    // If they don't have an connected wallet, exit!\n    if (!address) {\n      return;\n    }\n\n    // Check if the user has the NFT by using bundleDropModule.balanceOf\n    return bundleDropModule\n      .balanceOf(address, \"0\")\n      .then((balance) => {\n        // If balance is greater than 0, they have our NFT!\n        if (balance.gt(0)) {\n          setHasClaimedNFT(true);\n          console.log(\"ðŸŒŸ this user has a membership NFT!\")\n        } else {\n          setHasClaimedNFT(false);\n          console.log(\"ðŸ˜­ this user doesn't have a membership NFT.\")\n        }\n      })\n      .catch((error) => {\n        setHasClaimedNFT(false);\n        console.error(\"failed to nft balance\", error);\n      });\n  }, [address]);\n\n  // This useEffect grabs all our the addresses of our members holding our NFT.\n  useEffect(() => {\n  if (!hasClaimedNFT) {\n    return;\n  }\n\n  // Just like we did in the 7-airdrop-token.js file! Grab the users who hold our NFT\n  // with tokenId 0.\n  bundleDropModule\n    .getAllClaimerAddresses(\"0\")\n    .then((addresess) => {\n      console.log(\"ðŸš€ Members addresses\", addresess)\n      setMemberAddresses(addresess);\n    })\n    .catch((err) => {\n      console.error(\"failed to get member list\", err);\n    });\n  }, [hasClaimedNFT]);\n\n// This useEffect grabs the # of token each member holds.\n  useEffect(() => {\n  if (!hasClaimedNFT) {\n    return;\n  }\n\n  // Grab all the balances.\n  tokenModule\n    .getAllHolderBalances()\n    .then((amounts) => {\n      console.log(\"ðŸ‘œ Amounts\", amounts)\n      setMemberTokenAmounts(amounts);\n    })\n    .catch((err) => {\n      console.error(\"failed to get token amounts\", err);\n    });\n  }, [hasClaimedNFT]);\n\n  // Retrieve all our existing proposals from the contract.\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n    // A simple call to voteModule.getAll() to grab the proposals.\n    voteModule\n      .getAll()\n      .then((proposals) => {\n        // Set state!\n        setProposals(proposals);\n        console.log(\"ðŸŒˆ Proposals:\", proposals)\n      })\n      .catch((err) => {\n        console.error(\"failed to get proposals\", err);\n      });\n  }, [hasClaimedNFT]);\n\n  // We also need to check if the user already voted.\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n\n    // If we haven't finished retrieving the proposals from the useEffect above\n    // then we can't check if the user voted yet!\n    if (!proposals.length) {\n      return;\n    }\n\n    // Check if the user has already voted on the first proposal.\n    voteModule\n      .hasVoted(proposals[0].proposalId, address)\n      .then((hasVoted) => {\n        setHasVoted(hasVoted);\n        console.log(\"ðŸ¥µ User has already voted\")\n      })\n      .catch((err) => {\n        console.error(\"failed to check if wallet has voted\", err);\n      });\n  }, [hasClaimedNFT, proposals, address]);\n\n// Now, we combine the memberAddresses and memberTokenAmounts into a single array\n  const memberList = useMemo(() => {\n  return memberAddresses.map((address) => {\n    return {\n      address,\n      tokenAmount: ethers.utils.formatUnits(\n        // If the address isn't in memberTokenAmounts, it means they don't\n        // hold any of our token.\n        memberTokenAmounts[address] || 0,\n        18,\n      ),\n    };\n  });\n  }, [memberAddresses, memberTokenAmounts]);\n\n  if(!address){\n    return(\n      <div className=\"content-container\">\n        <h1>Welcome to DApps and DAOs!</h1>\n        <div className=\"instructions\">\n          <h2 style={{'textAlign':'center'}}>An example DAO to learn about DApps and DAOs!</h2>\n          <p style={{'textAlign':'center'}}> To use this app all you need to do is get a wallet with a browser extension like <a className=\"keep-white\" href=\"https://metamask.io/download\">MetaMask</a></p>\n          <a  className=\"instructions-here keep-white\" href=\"https://gist.github.com/tschubotz/8047d13a2d2ac8b2a9faa3a74970c7ef\">Follow the Instructions here!</a>\n        </div>\n        <button onClick={() => connectWallet(\"injected\")} className=\"btn-hero\">\n          Connect your wallet\n        </button>\n      </div>\n    );\n  };\n\n  // If the user has already claimed their NFT we want to display the interal DAO page to them\n   // only DAO members will see this. Render all the members + token amounts.\n   if (hasClaimedNFT) {\n     return (\n       <div className=\"member-page\">\n         <h1>DApps and DAOs Member Page</h1>\n         <p>Congratulations on being a member!</p>\n         <div>\n           <div>\n             <h2>Member List</h2>\n             <table className=\"card\">\n               <thead>\n                 <tr>\n                   <th>Address</th>\n                   <th>Token Amount</th>\n                 </tr>\n               </thead>\n               <tbody>\n                 {memberList.map((member) => {\n                   return (\n                     <tr key={member.address}>\n                       <td>{shortenAddress(member.address)}</td>\n                       <td>{member.tokenAmount}</td>\n                     </tr>\n                   );\n                 })}\n               </tbody>\n             </table>\n           </div>\n           <div>\n             <h2>Active Proposals</h2>\n             <form\n               onSubmit={async (e) => {\n                 e.preventDefault();\n                 e.stopPropagation();\n\n                 //before we do async things, we want to disable the button to prevent double clicks\n                 setIsVoting(true);\n\n                 // lets get the votes from the form for the values\n                 const votes = proposals.map((proposal) => {\n                   let voteResult = {\n                     proposalId: proposal.proposalId,\n                     //abstain by default\n                     vote: 2,\n                   };\n                   proposal.votes.forEach((vote) => {\n                     const elem = document.getElementById(\n                       proposal.proposalId + \"-\" + vote.type\n                     );\n\n                     if (elem.checked) {\n                       voteResult.vote = vote.type;\n                       return;\n                     }\n                   });\n                   return voteResult;\n                 });\n\n                 // first we need to make sure the user delegates their token to vote\n                 try {\n                   //we'll check if the wallet still needs to delegate their tokens before they can vote\n                   const delegation = await tokenModule.getDelegationOf(address);\n                   // if the delegation is the 0x0 address that means they have not delegated their governance tokens yet\n                   if (delegation === ethers.constants.AddressZero) {\n                     //if they haven't delegated their tokens yet, we'll have them delegate them before voting\n                     await tokenModule.delegateTo(address);\n                   }\n                   // then we need to vote on the proposals\n                   try {\n                     await Promise.all(\n                       votes.map(async (vote) => {\n                         // before voting we first need to check whether the proposal is open for voting\n                         // we first need to get the latest state of the proposal\n                         const proposal = await voteModule.get(vote.proposalId);\n                         // then we check if the proposal is open for voting (state === 1 means it is open)\n                         if (proposal.state === 1) {\n                           // if it is open for voting, we'll vote on it\n                           return voteModule.vote(vote.proposalId, vote.vote);\n                         }\n                         // if the proposal is not open for voting we just return nothing, letting us continue\n                         return;\n                       })\n                     );\n                     try {\n                       // if any of the propsals are ready to be executed we'll need to execute them\n                       // a proposal is ready to be executed if it is in state 4\n                       await Promise.all(\n                         votes.map(async (vote) => {\n                           // we'll first get the latest state of the proposal again, since we may have just voted before\n                           const proposal = await voteModule.get(\n                             vote.proposalId\n                           );\n\n                           //if the state is in state 4 (meaning that it is ready to be executed), we'll execute the proposal\n                           if (proposal.state === 4) {\n                             return voteModule.execute(vote.proposalId);\n                           }\n                         })\n                       );\n                       // if we get here that means we successfully voted, so let's set the \"hasVoted\" state to true\n                       setHasVoted(true);\n                       // and log out a success message\n                       console.log(\"successfully voted\");\n                     } catch (err) {\n                       console.error(\"failed to execute votes\", err);\n                     }\n                   } catch (err) {\n                     console.error(\"failed to vote\", err);\n                   }\n                 } catch (err) {\n                   console.error(\"failed to delegate tokens\");\n                 } finally {\n                   // in *either* case we need to set the isVoting state to false to enable the button again\n                   setIsVoting(false);\n                 }\n               }}\n             >\n               {proposals.map((proposal, index) => (\n                 <div key={proposal.proposalId} className=\"card\">\n                   <h5>{proposal.description}</h5>\n                   <div>\n                     {proposal.votes.map((vote) => (\n                       <div key={vote.type}>\n                         <input\n                           type=\"radio\"\n                           id={proposal.proposalId + \"-\" + vote.type}\n                           name={proposal.proposalId}\n                           value={vote.type}\n                           //default the \"abstain\" vote to chedked\n                           defaultChecked={vote.type === 2}\n                         />\n                         <label htmlFor={proposal.proposalId + \"-\" + vote.type}>\n                           {vote.label}\n                         </label>\n                       </div>\n                     ))}\n                   </div>\n                 </div>\n               ))}\n               <button disabled={isVoting || hasVoted} type=\"submit\">\n                 {isVoting\n                   ? \"Voting...\"\n                   : hasVoted\n                     ? \"You Already Voted\"\n                     : \"Submit Votes\"}\n               </button>\n               <small>\n                 This will trigger multiple transactions that you will need to\n                 sign.\n               </small>\n             </form>\n           </div>\n         </div>\n       </div>\n     );\n   };\n\n   const mintNft = () => {\n  setIsClaiming(true);\n  // Call bundleDropModule.claim(\"0\", 1) to mint nft to user's wallet.\n  bundleDropModule\n  .claim(\"0\", 1)\n  .catch((err) => {\n    console.error(\"failed to claim\", err);\n    setIsClaiming(false);\n  })\n  .finally(() => {\n    // Stop loading state.\n    setIsClaiming(false);\n    // Set claim state.\n    setHasClaimedNFT(true);\n    // Show user their fancy new NFT!\n    console.log(\n      `ðŸŒŠ Successfully Minted! Check it out on OpenSea: https://testnets.opensea.io/assets/${bundleDropModule.address}/0`\n    );\n  });\n}\n\n   return (\n  <div className=\"mint-nft\">\n    <h1>Mint Your Free Membership NFT</h1>\n    <h3> This will give you access to the app as a member of the DAO</h3>\n    <p> Make sure MetaMask is on the Rinkeby network so you don't spend real money! </p>\n    <p> Then add \"fake\" ETH here: <a className=\"keep-white\" href=\"https://faucets.chain.link/rinkeby\">https://faucets.chain.link/rinkeby</a>, it's free! And then claim your NFT! </p>\n    <button\n      disabled={isClaiming}\n      onClick={() => mintNft()}\n    >\n      {isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"}\n    </button>\n  </div>\n );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport { ThirdwebWeb3Provider } from '@3rdweb/hooks';\n\n// Include what chains you wanna support.\n// 4 = Rinkeby.\nconst supportedChainIds = [4];\n\n// Include what type of wallet you want to support.\n// In this case, we support Metamask which is an \"injected wallet\".\nconst connectors = {\n  injected: {},\n};\n\n// Render the App component to the DOM\nReactDOM.render(\n  <React.StrictMode>\n      <ThirdwebWeb3Provider\n      connectors={connectors}\n      supportedChainIds={supportedChainIds}\n    >\n      <App />\n      </ThirdwebWeb3Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}